name: GCP VM Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: dynamic-now-438707-c1
  ZONE: asia-south1-b
  VM_NAME: hello-test
  MACHINE_TYPE: e2-micro
  IMAGE_FAMILY: ubuntu-2404-lts-amd64
  IMAGE_PROJECT: ubuntu-os-cloud
  REPO_URL: https://github.com/madhuri-9182/test.git

jobs:
  gce-image-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/568722140219/locations/global/workloadIdentityPools/github-pool/providers/github
          service_account: github-actions@dynamic-now-438707-c1.iam.gserviceaccount.com

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Check if VM exists and create if needed
        run: |
          if ! gcloud compute instances describe "$VM_NAME" --zone="$ZONE" --project="$PROJECT_ID" --quiet >/dev/null 2>&1; then
            echo "VM does not exist. Creating..."
            gcloud compute instances create "$VM_NAME" \
              --project="$PROJECT_ID" \
              --zone="$ZONE" \
              --machine-type="$MACHINE_TYPE" \
              --image-family="$IMAGE_FAMILY" \
              --image-project="$IMAGE_PROJECT" \
              --tags=http-server,https-server \
              --boot-disk-size=10GB \
              --metadata=startup-script='#!/bin/bash
          set -e
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get install -y python3 python3-pip python3-venv git
          mkdir -p /opt/app
          DEFAULT_USER=$(getent passwd 1000 | cut -d: -f1)
          if [ -z "$DEFAULT_USER" ]; then
            DEFAULT_USER=ubuntu
          fi
          chown -R $DEFAULT_USER:$DEFAULT_USER /opt/app
          echo "VM setup complete"
          '
            echo "VM created. Waiting 90 seconds..."
            sleep 90
          else
            echo "VM already exists"
          fi

      - name: Ensure python3-venv is installed
        run: |
          echo "Installing required packages..."
          gcloud compute ssh "$VM_NAME" --zone="$ZONE" --project="$PROJECT_ID" --command="sudo apt-get update -y && sudo apt-get install -y python3-venv python3-pip git"

      - name: Setup directory permissions
        run: |
          echo "Setting up permissions..."
          gcloud compute ssh "$VM_NAME" --zone="$ZONE" --project="$PROJECT_ID" --command="sudo mkdir -p /opt/app && sudo chown -R \$USER:\$USER /opt/app"

      - name: Deploy application
        run: |
          echo "Deploying application..."
          gcloud compute ssh "$VM_NAME" --zone="$ZONE" --project="$PROJECT_ID" --command="
          set -e
          cd /opt/app
          if [ ! -d .git ]; then
            echo 'Cloning repository...'
            git clone $REPO_URL .
          else
            echo 'Pulling latest code...'
            git pull origin main || git pull
          fi
          if [ ! -d venv ]; then
            echo 'Creating virtual environment...'
            python3 -m venv venv
          fi
          echo 'Activating venv and installing dependencies...'
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          echo 'Deployment complete'
          "

      - name: Configure Gunicorn service
        run: |
          echo "Configuring Gunicorn..."
          gcloud compute ssh "$VM_NAME" --zone="$ZONE" --project="$PROJECT_ID" --command="
          sudo tee /etc/systemd/system/gunicorn.service > /dev/null <<EOF
          [Unit]
          Description=Gunicorn Service for Test App
          After=network.target

          [Service]
          User=\$USER
          Group=\$USER
          WorkingDirectory=/opt/app
          Environment=\"PATH=/opt/app/venv/bin\"
          ExecStart=/opt/app/venv/bin/gunicorn --bind 0.0.0.0:8000 --workers 2 app:app
          Restart=always
          RestartSec=3

          [Install]
          WantedBy=multi-user.target
          EOF
          sudo systemctl daemon-reload
          sudo systemctl enable gunicorn.service
          sudo systemctl restart gunicorn.service
          sleep 5
          if sudo systemctl is-active --quiet gunicorn.service; then
            echo 'Gunicorn is running'
            sudo systemctl status gunicorn.service --no-pager
          else
            echo 'Gunicorn failed to start'
            sudo journalctl -u gunicorn.service -n 30 --no-pager
            exit 1
          fi
          "

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          gcloud compute ssh "$VM_NAME" --zone="$ZONE" --project="$PROJECT_ID" --command="
          if sudo ss -tlnp | grep -q ':8000'; then
            echo 'Port 8000 is listening'
          else
            echo 'Port 8000 not listening'
            exit 1
          fi
          sleep 3
          if curl -f http://localhost:8000 >/dev/null 2>&1; then
            echo 'Application responding'
          else
            echo 'Application not responding'
          fi
          "

      - name: Get external IP
        run: |
          EXTERNAL_IP=$(gcloud compute instances describe "$VM_NAME" --zone="$ZONE" --project="$PROJECT_ID" --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
          echo "======================================"
          echo "Deployment Complete!"
          echo "URL: http://$EXTERNAL_IP:8000"
          echo "======================================"

      - name: Check VM status
        run: |
          STATUS=$(gcloud compute instances describe "$VM_NAME" --zone="$ZONE" --project="$PROJECT_ID" --format="value(status)")
          echo "VM Status: $STATUS"