name: 'GCP VM Deploy'
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: dynamic-now-438707-c1
  ZONE: asia-south1-b
  VM_NAME: hello-test
  MACHINE_TYPE: e2-micro
  IMAGE_FAMILY: ubuntu-2404-lts-amd64
  IMAGE_PROJECT: ubuntu-os-cloud
  REPO_URL: https://github.com/madhuri-9182/test.git

jobs:
  gce-image-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/568722140219/locations/global/workloadIdentityPools/github-pool/providers/github'
          service_account: 'github-actions@dynamic-now-438707-c1.iam.gserviceaccount.com'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Check if VM exists and Create VM instance if needed
        run: |
          # Check if VM exists
          if ! gcloud compute instances describe "$VM_NAME" --zone="$ZONE" --project="$PROJECT_ID" --quiet >/dev/null 2>&1; then
            echo "⚠️ VM $VM_NAME does not exist. Creating it..."
            
            gcloud compute instances create "$VM_NAME" \
            --project="$PROJECT_ID" \
            --zone="$ZONE" \
            --machine-type="$MACHINE_TYPE" \
            --image-family="$IMAGE_FAMILY" \
            --image-project="$IMAGE_PROJECT" \
            --tags=http-server,https-server \
            --boot-disk-size=10GB \
            --metadata=startup-script='#!/bin/bash
          set -e
          sudo apt-get update -y
          apt-get install -y python3 python3-pip python3-venv git
          # Clone repository to /opt/app
          mkdir -p /opt/app
          sudo chown $USER:$USER /opt/app 
          cd /opt/app
          git clone '"$REPO_URL"' .
      
          echo "Repository cloned successfully"
          '
      
          echo "VM $VM_NAME created successfully"
          echo "Waiting 60 seconds for VM initialization..."
          sleep 60
          else
          echo "✅ VM $VM_NAME already exists. Skipping creation."
          fi

      - name: Deploy application to VM
        run: |
          echo "Deploying application to VM: $VM_NAME"
          gcloud compute ssh "$VM_NAME" \
          --zone="$ZONE" \
          --project="$PROJECT_ID" \
          --command='
          set -e
          cd /opt/app
    
          # Setup Python virtual environment
          if [ ! -d "venv" ]; then
          echo "Creating virtual environment..."
          python3 -m venv venv
          fi
          
          # Activate venv and install dependencies
          source venv/bin/activate
          echo "📦 Installing dependencies..."
          pip install --upgrade pip
          pip install -r requirements.txt
    
          echo "✅ Application deployed successfully"
          '
    

      - name: Configure Gunicorn service on VM
        run: |
          echo "⚙️ Configuring Gunicorn systemd service..."
          gcloud compute ssh "$VM_NAME" \
          --zone="$ZONE" \
          --project="$PROJECT_ID" \
          --command='
          sudo bash -c "cat > /etc/systemd/system/gunicorn.service <<EOF
          [Unit]
          Description=Gunicorn Service for Test App
          After=network.target

          [Service]
          User=root
          WorkingDirectory=/opt/app
          ExecStart=/opt/app/venv/bin/gunicorn --bind 0.0.0.0:8000 app:app
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOF"

          # Reload systemd and restart service
          sudo systemctl daemon-reload
          sudo systemctl enable gunicorn.service
          sudo systemctl restart gunicorn.service
    
          # Wait a moment for service to start
          sleep 3
    
          # Check service status
          sudo systemctl status gunicorn.service --no-pager -l || true
    
          echo "✅ Gunicorn service configured and started"
          '

      - name: Confirm VM is running
        run: |
          echo "🔍 Checking VM status..."
          gcloud compute instances describe "$VM_NAME" \
            --zone="$ZONE" \
            --project="$PROJECT_ID" \
            --format="value(status)"